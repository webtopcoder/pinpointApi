components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, partner]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z
    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

/auth/register:
  post:
    summary: Register as user
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - firstName
              - lastName
              - email
              - password
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
                format: email
                description: must be unique
              password:
                type: string
                format: password
                minLength: 8
                description: At least one number and one letter
              role:
                type: string
                enum: ['user', 'partner']
            example:
              firstName: Firstname
              lastName: Lastname
              email: fake@example.com
              password: password1
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
                tokens:
                  $ref: '#/components/schemas/AuthTokens'
      '400':
        $ref: '#/components/responses/DuplicateEmail'

/auth/login:
  post:
    summary: Login
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                required: true
              password:
                type: string
                format: password
                required: true
            example:
              email: fake@example.com
              password: password1
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
                tokens:
                  $ref: '#/components/schemas/AuthTokens'
      '401':
        description: Invalid email or password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              code: 401
              message: Invalid email or password

/auth/logout:
  post:
    summary: Logout
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - refreshToken
            properties:
              refreshToken:
                type: string
            example:
              refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
    responses:
      '204':
        description: No content
      '404':
        $ref: '#/components/responses/NotFound'

/auth/refresh-tokens:
  post:
    summary: Refresh auth tokens
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - refreshToken
            properties:
              refreshToken:
                type: string
            example:
              refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokens'
      '401':
        $ref: '#/components/responses/Unauthorized'

/auth/forgot-password:
  post:
    summary: Forgot password
    description: An email will be sent to reset password.
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
            example:
              email: fake@example.com
    responses:
      '204':
        description: No content
      '404':
        $ref: '#/components/responses/NotFound'

/auth/reset-password:
  post:
    summary: Reset password
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - password
              - otp
              - email
            properties:
              password:
                type: string
                format: password
                minLength: 8
                description: At least one number and one letter
              otp:
                type: string
                minLength: 6
                description: OTP
              email:
                type: string
                format: email
            example:
              password: password1
              otp: ccz04v
              email: fake@example.com
    responses:
      '204':
        description: No content
      '401':
        description: Password reset failed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              code: 401
              message: Password reset failed

/auth/change-password:
  post:
    summary: Change password
    tags: [Auth]
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - currentPassword
              - newPassword
            properties:
              currentPassword:
                type: string
                format: password
              newPassword:
                type: string
                format: password
                minLength: 8
                description: At least one number and one letter
            example:
              currentPassword: password1
              newPassword: password2
    responses:
      '204':
        description: No content
      '401':
        description: Password change failed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              code: 401
              message: Password change failed

/auth/send-verification-email:
  post:
    summary: Send verification email
    description: An email will be sent to verify email.
    tags: [Auth]
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
            example:
              email: fake@example.com
    responses:
      '204':
        description: No content
      '401':
        $ref: '#/components/responses/Unauthorized'

/auth/verify-email:
  post:
    summary: verify email
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - otp
            properties:
              otp:
                type: string
                minLength: 6
                description: OTP
              email:
                type: string
                format: email
            example:
              otp: cnz04v
              email: fake@example.com
    responses:
      '204':
        description: No content
      '401':
        description: verify email failed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              code: 401
              message: verify email failed

/auth/me:
  get:
    summary: Get information of own
    description: Details will be fetched of the authenticated user
    tags: [Auth]
    security:
      - bearerAuth: []
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
      '401':
        description: unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              code: 401
              message: unauthorized access
